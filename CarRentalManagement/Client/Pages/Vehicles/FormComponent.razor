@inject HttpClient _client
@*Componente que nos da blazor para formularios, has que pasarle algunos parametros
como el model vehicles ve que tipo de datos debo usar para inferir qeu campos se supone
debo prestar atencion, y OnValidSubmit que quiero que haga si envio todos los datos bien*@
<EditForm Model="@vehicle" OnValidSubmit="@OnValidSubmit" >
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled = "@Disabled">
        <div class="form-group">
            <label>Make: </label>
            <div>
                <select @bind="vehicle.MakeId" class="form-control">
                    <option value="">-- Select Make --</option>
                    @if (Makes != null)
                    {
                        @foreach (var make in Makes)
                        {
                            <option value="@make.Id">@make.Name</option>
                        }
                    }
                </select>
                <ValidationMessage For="@(() => vehicle.MakeId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Model: </label>
            <div>
                <InputSelect @bind-Value="vehicle.ModelId" class="form-control"> @*esto es lo mismo pero es un componente Blazor*@
                    <option value="">-- Select Model --</option>
                    @if (Models != null)
                    {
                        @foreach (var model in Models)
                        {
                            <option value="@model.Id">@model.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => vehicle.ModelId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Colour: </label>
            <div>
                <select @bind="vehicle.ColourId" class="form-control">
                    <option value="">-- Select Colour --</option>
                    @if (Colours != null)
                    {
                        @foreach (var colour in Colours)
                        {
                            <option value="@colour.Id">@colour.Name</option>
                        }
                    }
                </select>
                <ValidationMessage For="@(() => vehicle.ColourId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Year: </label>
            <div>
                <InputNumber @bind-Value="@vehicle.Year" />
                <ValidationMessage For="@(() => vehicle.Year)" />
            </div>
        </div>
        <div class="form-group">
            <label>License Plate Number: </label>
            <div>
                <InputText @bind-Value="@vehicle.LicensePlateNumber" />
                <ValidationMessage For="@(() => vehicle.LicensePlateNumber)" />
            </div>
        </div>
        <div class="form-group">
            <label>Vehicle Identification Number: </label>
            <div>
                <InputText @bind-Value="@vehicle.Vin" />
                <ValidationMessage For="@(() => vehicle.Vin)" />
            </div>
        </div>
        <div class="form-group">
            <label>Daily Rate: </label>
            <div>
                <InputNumber @bind-Value="@vehicle.RentalRate" />
                <ValidationMessage For="@(() => vehicle.RentalRate)" />
            </div>
        </div>
    </fieldset>
    
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>   
    }
    
    <BackToList Target="vehicles" />
</EditForm>

@code {
    private List<Make> Makes;
    private List<Colour> Colours;
    private List<Model> Models;

    protected async override Task OnInitializedAsync()
    {
        Makes = await _client.GetFromJsonAsync<List<Make>>(Endpoints.MakesEndpoint);
        Colours = await _client.GetFromJsonAsync<List<Colour>>(Endpoints.ColoursEndpoint);
        Models = await _client.GetFromJsonAsync<List<Model>>(Endpoints.ModelsEndpoint);
    }

    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Vehicle vehicle { get; set; }
    [Parameter] public string ButtonText { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }

}
