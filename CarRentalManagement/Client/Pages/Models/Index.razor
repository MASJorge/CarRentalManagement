@page "/models/" 
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<HeadingComponent Text="Models" />
<br />

<a href="/models/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
     Create New Model
</a>
<br />
<br />

@if(Models == null)
{
    <div class ="alert alert-info">Loading Makes...</div>
}
else
{
    <table class= "table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var model in Models)
            {
                <tr>
                    <td>@model.Name</td>
                    <td>
                        <a href="/models/view/@model.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>    
                        </a>
                        <a href="/models/edit/@model.Id" class="btn btn-warning">
                            <span class="oi oi-book"></span>    
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(model.Id))">
                            <span class="oi oi-delete"></span> 
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Model> Models;

    protected async override Task OnInitializedAsync()
    {
        Models = await _client.GetFromJsonAsync<List<Model>>($"{Endpoints.ModelsEndpoint}"); 
    } 

    async Task Delete(string modelId)
    {
        var model = Models.First(q => q.Id == modelId);
        if(await js.InvokeAsync<bool>("confirm", $"Do you want to delete {model.Name}?"))
        {
            await _client.DeleteAsync($"{Endpoints.ModelsEndpoint}/{modelId}");
            await OnInitializedAsync();
        }
       
    }

}
